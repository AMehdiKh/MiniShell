To set up the redirection before executing the commands, you can follow these steps:

    Initialize the necessary file descriptors for redirection. For example, you can use the following variables:
        int stdin_fd for standard input (STDIN_FILENO)
        int stdout_fd for standard output (STDOUT_FILENO)
        int stderr_fd for standard error (STDERR_FILENO)

    Traverse the linked list of commands (t_cmd nodes) and perform the redirection for each node.

    For each node, check the values of the lr_op and rr_op tokens to determine the redirection type.

    Based on the redirection type, perform the appropriate redirection using the dup2() function.

        For left read redirection:
            If lr_op is R_FILE, open the file specified in lr using open() and store the returned file descriptor in a variable (let's call it lr_fd).
            If lr_op is HEREDOC, you can handle it differently by using a here-document. You can create a temporary file using tmpfile() or mkstemp() and write the contents of lr to that file. Then use fseek() to set the file position indicator back to the beginning of the file, and finally, use fileno() to get the file descriptor from the file pointer.
            If lr_op is STDIN, there is no redirection required.

        For right write redirection:
            If rr_op is W_A_FILE, open the file specified in rr in append mode using open() and store the returned file descriptor in a variable (let's call it rr_fd).
            If rr_op is W_T_FILE, open the file specified in rr in truncate mode (overwrite existing contents) using open() and store the returned file descriptor in rr_fd.
            If rr_op is STDOUT, there is no redirection required.

    Perform the redirection by calling dup2() to redirect the appropriate file descriptors. For example:
        If lr_op is not STDIN, call dup2(lr_fd, stdin_fd) to redirect standard input.
        If rr_op is not STDOUT, call dup2(rr_fd, stdout_fd) to redirect standard output.

    Close the unnecessary file descriptors (lr_fd and rr_fd) using close().

    Execute the command using execve(cmd, argv, environ) or a similar function.

    After executing the command, restore the original standard input and output by calling dup2() with stdin_fd and stdout_fd.

    Repeat the process for the next node in the linked list until there are no more commands.

Note: Make sure to handle any error conditions that may occur during file opening, file descriptor duplication, or command execution.

