/*
    void child_signals(int signum)
        This function is responsible for handling signals received by child processes. The signum parameter represents the signal number.
        The function checks if the received signal is SIGINT, which indicates an interrupt signal, typically sent by pressing Ctrl+C in the terminal.
        If the received signal is SIGINT, the following actions are taken:
            ft_dprintf(STDOUT_FILENO, "\n") is called to print a newline character to the standard output. This ensures that the output starts on a new line.
            g_shell->exit_status is set to 130. It seems like g_shell is a global variable representing the shell or program's state, and exit_status is a field within that structure to store the exit status of the program.
            exit(130) is called to terminate the child process with an exit status of 130. The value 130 is commonly used to indicate that the program was terminated by an interrupt signal.

    void dismiss_signal(int signum)
        This function is responsible for dismissing or handling signals received by the program itself.
        It checks if the received signal is SIGINT, indicating an interrupt signal.
        If the received signal is SIGINT, the following actions are taken:
            ft_dprintf(STDOUT, "\n") is called to print a newline character to the standard output. This ensures that the output starts on a new line.
            rl_on_new_line() is called. It appears to be a function related to line editing or readline functionality, which brings the prompt to a new line.
            rl_replace_line("", 0) is called to replace the current input line with an empty string. This effectively clears the input line.
            rl_redisplay() is called to refresh the display after clearing the input line.
            g_shell->exit_status is set to 130, indicating that the program was terminated by an interrupt signal.

    void config_signals(void)
        This function is responsible for configuring the signal handlers for the program.
        It sets up the signal handler for SIGINT by using the sigaction() function from the signal.h header.
        The sa struct of type struct sigaction is created to specify the handler and other properties of the signal action.
        sa.sa_handler is set to &dismiss_signal, which means the dismiss_signal function will be called when SIGINT is received.
        sa.sa_flags is set to SA_RESTART, which specifies that interrupted system calls should be automatically restarted.
        The sa.sa_mask is initialized using sigemptyset() to clear the signal mask, and then sigaddset() is used to add SIGINT to the mask. This means that while handling a SIGINT signal, SIGINT itself will be blocked to prevent recursive signal handling.
        Finally, sigaction() is called to associate the signal handler and properties with the SIGINT signal. NULL is passed as the last argument to ignore the previous signal action.
        Additionally, signal(SIGQUIT, SIG_IGN) is called to ignore the SIGQUIT signal. The SIGQUIT signal is typically sent by pressing Ctrl+\ and is often used to terminate a program and generate a core dump.

In summary, the child_signals() function handles signals received by child processes, dismissing the SIGINT signal and exiting the child process with an exit status of 130. The dismiss_signal() function handles signals received by the program itself, dismissing the SIGINT signal, clearing the input line, and updating the exit status. The config_signals() function sets up the signal handlers for SIGINT and SIGQUIT, with SIGINT using the dismiss_signal() handler and SIGQUIT being ignored.
*/
